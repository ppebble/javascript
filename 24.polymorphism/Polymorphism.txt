다형성 :: 특정 기능을 선언부분과 구현부분으로 분리한 후 구현 부분을 다양한 방법으로 만들어서 선택해서 사용할 수
            있게 하는 기능이다.

    선언 부분 :: 인터페이스이며 구현코드가 전혀 없는 텅 빈 상태이며 일종의 규약으로 가득찬 문서라고 볼 수 있다.
    구현 부분 :: 인터페이스를 상속받아 선언부분에 맞게 구현하는 부분이다. 1:N의 관계가 형성된다.

    EX :: 충전기 <- C-TYPE / 5Pin / i-phone  <- 여러 종류의 충전기들 ,,,

    표준화 :: 구현부에선 선언부에서 정의되어 있는 메소드와 동일하게 메소드를 만들어야 한다.(선언부가 같아야함)
    
    매개변수 값으로 넘겨줄 수 있는 값의 타입이 반드시 정렬기능 인터페이스를 구현한 객체여야 한다.

                        - 자바스크립트는 다형성을 따로 지원해주진않는다.

    
다형성과 데이터 타입  ::
    자바스크립트에서는 데이터 타입이 중요하게 사용되진 않는다 . . .(느슨한 타입 체크, 한무 var)
    일반 OOP는 데이터 타입은 굉장히 중요함.(string, char, int, float, ...)

    OOP에서는 데이터 타입 규약을 활용해 다양한 다형성을 구현한다. 
    Object A로 구현한 메소드의 리턴 데이터 타입 역시 A여야 하며 다른 데이터 타입도 동일함.

    상속과 다형성 ㅡ 메소드의 매개변수로 부모클래스의 타입이 선언되어 있다면 반드시 부모클래스의 인스턴스이거나
        부모클래스를 상속받는 자식클래스의 인스턴스를 매개변수로 주고 호출해야 한다는 것이다.(포함관계)
    

일반 OOP에서의 데이터 타입 규칙
 :: 변수 및 매개변수 선언 시 특정 인터페이스 타입인 경우
    반드시 특정 인터페이스를 구현한 클래스의 인스턴스만을 저장하거나 매개변수 값으로 넘길 수 있다.
 :: 변수 및 매개변수 선언 시 특정 클래스 타입인 경우 반드시 특정 클래스 또는 특정 클래스를 
    상속받은 자식 클래스의 인스턴스만을 저장하거나 매개변수 값으로 넘길 수 있다.



자바스크립트에서 다형성
    자바스크립트는 엄격한 데이터체크/추상클래스/인터페이스 모두 지원하지 않는다.

    하지만 문법만 제공하지 않을 뿐 다형성 개념을 사용해 코드를 만들면 된다.